* Costs
  :PROPERTIES:
  :EXPORT_FILE_NAME: ../Materials/Project4/example_costs.ipynb
  :END:
** Preface

   There are a few modules you may need to install (but avoid this if you can; you may need to restart your kernel afterwards):
 #+begin_src jupyter-python
#!pip install -r requirements.txt
 #+end_src

We import critical objects from =example_nutrition.py=, avoiding the need to do so in this notebook.  These are for Uganda:
#+begin_src jupyter-python
from example_nutrition import r as uga
from example_nutrition import rdi, nutrient_demand
#+end_src


** Ceteris Paribus

    We begin by setting up some benchmarks for prices and budgets, so
    the things we don't want to change we can hold fixed.

#+begin_src jupyter-python
from example_nutrition import pbar, my_prices
#+end_src

*** Budgets

Get food budget for all households, then find median budget:
#+begin_src jupyter-python
import numpy as np

xhat = uga.predicted_expenditures()

# Total food expenditures per household
xbar = xhat.groupby(['i','t','m']).sum()

# Reference budget
x0 = xbar.quantile(0.5)  # Household at 0.5 quantile is median
#+end_src


** Mapping to Nutrients :noexport:
*** FCT
 We've seen how to map prices and budgets into vectors of consumption
 quantities using =cfe.Regression.demands=.  Next we want to think about
 how to map these into bundles of /nutrients/.  The information needed
 for the mapping comes from a "Food Conversion Table" (or database,
 such as the [[https://fdc.nal.usda.gov/][USDA Food Data Central]]).    We've already grabbed an FCT, let's take a look:
 #+begin_src jupyter-python
fct
 #+end_src

*** Food Quantities
Get quantities of food by dividing expenditures by prices:
#+begin_src jupyter-python
qhat = (xhat.unstack('j')/pbar).dropna(how='all')

 #+begin_src jupyter-python

# Predicted budgets (sum of all expenditures for each household)
xbar = uga.predicted_expenditures().groupby(['i','t']).sum()

# Drop households with /no/ predicted expenditures
xbar = xbar.where(xbar>0)

# A quantile of 0.5 is the median.  Play with quantile value, or just assign.
x0 = xbar.quantile(0.5) # Budget (median household)

# Range of budgets to explore
X = np.linspace(x0/10,x0*5,50)

#+end_src


 With this =nutrient_demand= function in hand, we can see how nutrient
 outcomes vary with budget, given prices:
 #+begin_src jupyter-python
import numpy as np
import matplotlib.pyplot as plt

X = np.linspace(x0/5,x0*5,100)

UseNutrients = ['Protein','Energy','Iron','Calcium','Vitamin C']

df = pd.concat({myx:np.log(nutrient_demand(myx,pbar))[UseNutrients] for myx in X},axis=1).T
ax = df.plot()

ax.set_xlabel('log budget')
ax.set_ylabel('log nutrient')
 #+end_src


 Now how does nutrition vary with prices?

 #+begin_src jupyter-python
USE_GOOD = 'Oranges'

scale = np.geomspace(.01,10,50)

ndf = pd.DataFrame({s:np.log(nutrient_demand(x0/2,my_prices(pbar[USE_GOOD]*s,j=USE_GOOD)))[UseNutrients] for s in scale}).T

ax = ndf.plot()

ax.set_xlabel('log price')
ax.set_ylabel('log nutrient')
 #+end_src


** Simple Policy Experiments: Changing Prices

If price of a good increases/decreases, what's the cost to the
household?  Ask a related question: If a price $p_1$ increases, how
much /income/ do we need to give to the household to make it just as
well off as it was at the old prices?

Summarize this as the  /compensating variation/ associated with the
price change.

[[./compensating_variation.png]]

Compensating Variation can also be measured as the (change in the)
area under the *Hicksian* (or *compensated*) demand curve:

[[./compensating_variation_newexpenditure.png]].

*** Marshallian vs. Hicksian Demand Curves

Let's look at Marshallian & Hicksian demands---one way of thinking
about the Hicksian (compensated) curves is that they  eliminate the
income effect associated with changing prices.

 #+begin_src jupyter-python
import matplotlib.pyplot as plt
%matplotlib inline

my_j = 'Matoke'  # Interesting Ugandan staple

P = np.geomspace(.01,10,50)*pbar[my_j]

# Utility of median household, given prices
U0 = uga.indirect_utility(x0,pbar)

plt.plot([uga.demands(x0,my_prices(my_j,p0))[my_j] for p0 in P],P)
plt.plot([uga.demands(U0,my_prices(my_j,p0),type="Hicksian")[my_j] for p0 in P],P)
plt.ylabel('Price')
plt.xlabel(my_j)
plt.legend(("Marshallian","Hicksian"))
 #+end_src


*** Welfare measures
 #+begin_src jupyter-python :results silent
def compensating_variation(U0,p0,p1):
    x0 = uga.expenditure(U0,p0)
    x1 = uga.expenditure(U0,p1)

    return x1-x0

def revenue(U0,p0,p1,type='Marshallian'):
    """(Un)Compensated revenue from taxes changing vector of prices from p0 to p1.

    Note that this is only for *demand* side (i.e., if supply perfectly elastic).
    """
    
    dp = p1 - p0 # Change in prices

    c = uga.demands(U0,p1,type=type)

    dp,c = dp.align(c,join='inner')

    return dp.T@c


def deadweight_loss(U0,p0,p1):
    """
    Deadweight loss of tax/subsidy scheme creating wedge in prices from p0 to p1.

    Note that this is only for *demand* side (i.e., if supply perfectly elastic).
    """
    cv = compensating_variation(U0,p0,p1)

    return cv - revenue(U0,p0,p1,type='Hicksian') 
    

 #+end_src

*** Price Changes, Revenue, and Compensating Variation

Examine effects of price changes on revenue (if price change due to a
tax or subsidy) and compensating variation.

 #+begin_src jupyter-python
fig, ax1 = plt.subplots()

ax1.plot(P,[compensating_variation(U0,pbar,my_prices(my_j,p0)) for p0 in P])
ax1.set_xlabel(f"Price of {my_j}")
ax1.set_ylabel("Compensating Variation")

ax1.plot(P,[revenue(U0,pbar,my_prices(my_j,p0),type='Hicksian') for p0 in P],'k')
ax1.legend(('Compensating Variation','Revenue'))
ax1.axhline(0)
ax1.axvline(pbar.loc[my_j])

 #+end_src

*** Deadweight Loss

Differences between revenue and compensating variation is deadweight-loss:
 #+begin_src jupyter-python
fig, ax1 = plt.subplots()

ax1.plot(P,[deadweight_loss(U0,pbar,my_prices(my_j,p0)) for p0 in P])
ax1.set_xlabel("Price of %s" % my_j)
ax1.set_ylabel("Deadweight Loss")
 #+end_src





