* Costs
  :PROPERTIES:
  :EXPORT_FILE_NAME: ../Materials/Project4/example_costs.ipynb
  :END:
** Preface

   There are a few modules you may need to install:
 #+begin_src ipython
#!pip install -r requirements.txt
 #+end_src


   All the data required for estimation and calculation can be found
   in a google spreadsheet.  Choose one to explore!
 #+begin_src ipython
COUNTRY = 'Uganda'
 #+end_src

 #+begin_src ipython
URL = {'Uganda':'https://docs.google.com/spreadsheets/d/1yVLriVpo7KGUXvR3hq_n53XpXlD5NmLaH1oOMZyV0gQ/',
       'Tanzania':'https://docs.google.com/spreadsheets/d/1Tknc2F8K6SaA7j0R7J_NE8yJBTsCPPw77_Bfc04MY40/',
       'ICRISAT':'https://docs.google.com/spreadsheets/d/13Ig5hZif-NSHtgkKRp_cEgKXk0lOsdUB2BAD6O_FnRo',
       'Nigeria':{'Expenditures':'https://docs.google.com/spreadsheets/d/1qzz6XGhPWLZLmwjrUY4W9k9U2PYukWblQKXWu0l37C4/',
                  'FCT':'https://docs.google.com/spreadsheets/d/1whE_EW5x-jxrsKvYWfefdBppzp_TZhPP61bdEN-FEJ4/',
                  'RDI':'https://docs.google.com/spreadsheets/d/1whE_EW5x-jxrsKvYWfefdBppzp_TZhPP61bdEN-FEJ4/',
                  'HH Characteristics':'https://docs.google.com/spreadsheets/d/1whE_EW5x-jxrsKvYWfefdBppzp_TZhPP61bdEN-FEJ4/',
                  'Prices':'https://docs.google.com/spreadsheets/d/1whE_EW5x-jxrsKvYWfefdBppzp_TZhPP61bdEN-FEJ4/'}
                  }
DAYS_PER_PERIOD = {'Uganda':7,'Tanzania':7,'ICRISAT':365.25,'Nigeria':7} # Number of days of expenditure recall
 #+end_src

** Estimation
    First, we pull in data and estimate CFE demands /given/ the prices
    and budgets of households in the data.  (If you've already done
    the estimation and saved it, skip this step...)

 #+begin_src ipython 
import cfe
import numpy as np
from eep153_tools.sheets import read_sheets

x = read_sheets(URL[COUNTRY],sheet='Expenditures').set_index(['j','t','m'])
x.columns.name = 'i'
x = x.replace(0,np.nan)
y = np.log(x)

z = read_sheets(URL[COUNTRY],sheet='HH Characteristics').set_index(['j','t','m'])
z.columns.name = 'k'

p = read_sheets(URL[COUNTRY],sheet='Prices').set_index(['t','m'])
p.columns.name = 'i'

r = cfe.Result(y=y,z=z,prices=p)

r.get_alpha()
xhat = r.get_predicted_expenditures()
 #+end_src

 Estimation is kind of expensive, so you might want to save these
 results to use in your later code.
 #+begin_src ipython
r.to_dataset("my %s.ds" % COUNTRY)
 #+end_src

 By the same token, if you've *already* saved the estimated result, you
 can skip estimation and just  load it...
 #+begin_src ipython
import cfe
r = cfe.from_dataset("my %s.ds" % COUNTRY)
 #+end_src

** Ceteris Paribus

    We begin by setting up some benchmarks for prices and budgets, so
    the things we don't want to change we can hold fixed.
  #+begin_src ipython
### First period, first market, and some good.  Change if you wish! ###
my_t = r.coords['t'].data.flatten()[0] # Period 
my_m = r.coords['m'].data.flatten()[0] # Market
my_i = r.coords['i'].data.flatten()[0] # Good
#####################################################################

p = r.prices.sel(t=my_t,m=my_m,drop=True)
phat = p.to_dataframe('i').dropna().squeeze()

ref_price = r.prices.sel(i=my_i,t=my_t,m=my_m)
P = np.linspace(ref_price/10,ref_price*5,50)

def my_prices(p0,p=phat,i=my_i):
    """
    Set price of good i to p0, holding remaining prices fixed at values in p.
    """
    p = p.copy()
    p.loc[i] = p0
    return p.squeeze()

phat
  #+end_src

** Nutrient Demands
   The nutrient value of food consumed by the household is just the
   product of its diet and a food conversion table.  So let's write a
   function that describes that product:
 #+begin_src ipython
# Get FCT:
fct = read_sheets(URL[COUNTRY],sheet='FCT').set_index('i')
fct.columns.name='n'

def nutrient_demand(x,p):
    c = r.demands(x,p)
    fct0,c0 = fct.align(c,axis=0,join='inner')
    N = fct0.T@c0

    N = N.loc[~N.index.duplicated()]
    
    return N

fct
 #+end_src

** Nutritional requirements
 Individuals have nutritional requirements established by nutrition
 scientists.  Here we grab one such set of requirements:
 #+begin_src ipython
rdi = read_sheets(URL[COUNTRY],
                  sheet='RDI').set_index('n').replace(np.nan,0)
rdi.columns.name = 'k'

rdi = rdi.replace('',0)
rdi
 #+end_src

*** Nutritional Needs of Households
    Our data on demand and nutrients is at the /household/ level; we
    can't directly compare household level nutrition with individual
    level requirements.  What we *can* do is add up minimum individual
    requirements, and see whether household total exceed these.  This
    isn't a guarantee that all individuals have adequate nutrition
    (since the way food is allocated in the household might be quite
    unequal, or unrelated to individual requirements), but it is
    /necessary/ if all individuals are to have adequate nutrition.

    For the average household, the number of different kinds of people
    can be computed by averaging over households:
 #+begin_src ipython :results silent
# Find average household characteristics for reference period & place
zbar = r.z.sel(t=my_t,m=my_m,drop=True).mean('j').to_dataframe()
 #+end_src

 Now, the inner/dot/matrix product between =zbar= and the =rda=
 DataFrame of requirements will give us minimum requirements for the
 average household:
 #+begin_src ipython

# This matrix product gives minimum nutrient requirements for average
# household in reference year & place
my_rdi,my_zbar = rdi.align(zbar.T,axis=1,join='inner')
hh_rdi = my_rdi@my_zbar.T

# But this is per *day*, while our data is per period:
hh_rdi = hh_rdi*DAYS_PER_PERIOD[COUNTRY]
hh_rdi
 #+end_src

*** Nutritional Adequacy of Food Demands                            
 Since we can trace out demands for nutrients as a function of $(x,p)$,
 and we've computed minimum nutritional requirements for the average
 household, we can /normalize/ nutritional intake to check the adequacy
 of diet.
 #+begin_src ipython :results silent
def nutrient_adequacy_ratio(x,p):
    return (nutrient_demand(x,p)/hh_rdi.T).squeeze()
 #+end_src

Maybe select a few nutrients of particular interest...
#+begin_src ipython
UseNutrients = ['Calories','Protein','Iron','Calcium']

#+end_src


** Simple Policy Experiments

 Consider two policies:  First, changing income so that some proportion
 of the population achieves nutritional adequacy.  Here choose quantile
 we're interested in (e.g., a quantile of 0.5 is the median; a quantile
 of 0.25 is the household at the 25th percentage point of the distribution).

 #+begin_src ipython

# Predicted budgets (sum of all expenditures for each household)
xbar = r.get_predicted_expenditures().sel(t=my_t,m=my_m).sum('i')

# Drop households with /no/ predicted expenditures
xbar = xbar.where(xbar>0)

# A quantile of 0.5 is the median.  Play with quantile value, or just assign.
x0 = xbar.quantile(0.5,'j') # Budget (median household)
#x0 = 50

# Range of budgets to explore
X = np.linspace(x0/10,x0*5,50)
#+end_src


** Compensated Policy Experiments

 #+begin_src ipython
import matplotlib.pyplot as plt

my_i = 'Milk'

ref_price = r.prices.sel(i=my_i,t=my_t,m=my_m)
P = np.linspace(ref_price/10,ref_price*5,50)

# Utility of median household, given prices
U0 = r.indirect_utility(x0,p)  

plt.plot([r.demands(x0,my_prices(p0,i=my_i))[my_i] for p0 in P],P)
plt.plot([r.demands(U0,my_prices(p0,i=my_i),type="Hicksian")[my_i] for p0 in P],P)
plt.ylabel('Price')
plt.xlabel(my_i)
#plt.axhline(p.sel(i=my_i).values)
plt.legend(("Marshallian","Hicksian"))
 #+end_src

 #+begin_src ipython :results silent
def compensating_variation(U0,p0,p1):
    x0 = r.expenditure(U0,p0)
    x1 = r.expenditure(U0,p1)

    return x1-x0

def revenue(U0,p0,p1,type='Marshallian'):
    """(Un)Compensated revenue from taxes changing vector of prices from p0 to p1.

    Note that this is only for *demand* side (i.e., if supply perfectly elastic).
    """
    
    dp = p1 - p0 # Change in prices

    c = r.demands(U0,p1,type=type)

    dp,c = dp.align(c,join='inner')

    return dp.T@c


def deadweight_loss(U0,p0,p1):
    """
    Deadweight loss of tax/subsidy scheme creating wedge in prices from p0 to p1.

    Note that this is only for *demand* side (i.e., if supply perfectly elastic).
    """
    cv = compensating_variation(U0,p0,p1)

    return cv - revenue(U0,p0,p1,type='Hicksian') 
    
    
def compensated_nutrient_demand(U,p,z=None):
    c = r.demands(U,p,z=z,type='Hicksian')
    fct0,c0 = fct.align(c,axis=0,join='inner')
    N = fct0.T@c0

    return N

def compensated_nutrient_adequacy_ratio(U,p):
    return (compensated_nutrient_demand(U,p)/hh_rdi.T).squeeze()

 #+end_src

Examine effects of price changes on /compensated/ nutrient adequacy
(i.e., a price increase is accompanied by additional income to keep
utility constant).

 #+begin_src ipython
my_i = 'Matoke'

fig,ax2 = plt.subplots()
ax2.set_ylabel('log NAR')
ax2.plot(P,[np.log(compensated_nutrient_adequacy_ratio(U0,my_prices(p0,i=my_i))[UseNutrients]) for p0 in P])
ax2.legend(UseNutrients)
ax2.axhline(0)
ax2.set_xlabel("Price of %s" % my_i)
 #+end_src

Examine effects of price changes on revenue (if price change due to a
tax or subsidy) and compensating variation.

 #+begin_src ipython
fig, ax1 = plt.subplots()

ax1.plot(P,[compensating_variation(U0,phat,my_prices(p0,i=my_i)) for p0 in P])
ax1.set_xlabel("Price of %s" % my_i)
ax1.set_ylabel("Compensating Variation")

ax1.plot(P,[revenue(U0,phat,my_prices(p0,i=my_i),type='Hicksian') for p0 in P],'k')
ax1.legend(('Compensating Variation','Revenue'))
ax1.axhline(0)
ax1.axvline(phat.loc[my_i])

 #+end_src


Differences between revenue and compensating variation is deadweight-loss:
 #+begin_src ipython
fig, ax1 = plt.subplots()

ax1.plot(P,[deadweight_loss(U0,phat,my_prices(p0,i=my_i)) for p0 in P])
ax1.set_xlabel("Price of %s" % my_i)
ax1.set_ylabel("Deadweight Loss")
 #+end_src





