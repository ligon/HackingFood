* Introduction
In our last project we used data to estimate systems of food demand
using different datasets.  An output from that project was as set of
=cfe.Result= objects; these bundle together both data and the results
from the demand system estimation, and can be used for prediction as
well.  

Here we'll explore some of the uses of the =cfe.Result= class, using
an instance created using data from the Indian ICRISAT data.

If you don't already have the latest version of the =cfe= package
installed, grab it, along with some dependencies:
#+begin_src ipython
!pip install CFEDemands --upgrade --pre
!pip install xarray --upgrade
!pip install h5netcdf
#+end_src

#+begin_src ipython :results silent
import cfe

cfe.Result?
#+end_src

An instance =r= of =cfe.Result= can be made persistent with
=r.to_dataset('my_result.ds')=, which saves the instance "on disk" in
[[https://en.wikipedia.org/wiki/NetCDF][NetCDF format]], and can be loaded using =cfe.from_dataset=.  We use
this method below to load data and demand system estimated from the
Indian ICRISAT data:
#+begin_src ipython
r = cfe.result.from_dataset('Indian ICRISAT_small.ds')

#+end_src


Our focus earlier was on estimation, but the result =r= already has
encoded in it the results of that estimation.

There are parameters $\alpha$:
#+begin_src ipython
r.get_alpha(as_df=True).dropna()
#+end_src


Elasticity parameters $\beta$:
#+begin_src ipython
r.get_beta(as_df=True).dropna()
#+end_src

And parameters related to household characteristics $\delta$:

#+begin_src ipython
r.delta.to_dataframe().unstack('k').dropna()
#+end_src


The triple of paramters $(\alpha,\beta,\delta)$ completely describes
the demand system and the corresponding utility function (over the
goods we observe).

* Demands

As mentioned above, we've estimated the parameters of a Frischian
demand system (demands that depend on prices and the households
marginal utility of expenditures).  But we can /compute/ the
corresponding Marshallian (depends on prices and budget) or Hicksian
(depends on prices and the level of utility) demands for this same
population, using the =cfe.Result.demands= method.  

Let's compute Marshallian demands.  Start with a choice of budget $x$
and prices.  We'll use the earliest prices, and focus on
the first market we're interested in.
#+begin_src ipython :results silent
t = r.firstround  # First round
m = r.coords['m'][0] # First market

x = r.get_predicted_expenditures().sum('i')
medianx = x.where(x>0).sel(t=t,m=m).median('j').values # Budget (median household)

#+end_src

Now compute expenditures on different items.  The object =r= already knows what the estimated
parameters are, and uses those automatically:

#+begin_src ipython
xbar=r.demands(medianx) # Expenditures given median budget
xbar
#+end_src

So we can compute expenditures, but these are in units of Rupees.
We can get into physical units (say kilograms) by dividing coconut
expenditures by the price per kg in a given time and place:
#+begin_src ipython
USE_GOOD = 'Coconut'
    
# Reference prices for kgs at time t in market m
ref_price = r.prices.sel(t=t,m=m,u='Kilograms')

r.demands(medianx)[USE_GOOD]/ref_price.loc[USE_GOOD].values
#+end_src

Now we can trace out demands for a household with median budget but
varying prices of coconuts (holding other prices fixed):
#+begin_src ipython
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

# Scales of prices:
# Scales of prices:
P = np.linspace(1,10,100).tolist()

plt.plot([r.demands(medianx,p={USE_GOOD:scale})[USE_GOOD]/ref_price.loc[USE_GOOD].values for scale in P],P)

plt.xlabel("%s in Kgs" % USE_GOOD)
plt.ylabel('Price Scale')
#+end_src

Let's trace out demands for different budgets:
#+begin_src ipython
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

X = [medianx*s for s in [.25,.5,1.,2,4]]
for myx in X:
    plt.plot([r.demands(myx,p={USE_GOOD:scale})[USE_GOOD]/ref_price.loc[USE_GOOD].values for scale in P],P)

plt.xlabel("%s in Kgs" % USE_GOOD)
plt.ylabel('Price Scale')
plt.legend(X)
#+end_src




