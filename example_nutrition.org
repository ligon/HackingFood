* Preface

First, load relevant dataset:
#+begin_src ipython
import cfe

r = cfe.from_dataset('./IndianICRISAT/indian_icrisat.ds')
#+end_src

Also, choose reference prices:
#+begin_src ipython
x = 50 # Budget

# Note selection of prices for 1975 for market A
p = r.prices.sel(t=75,m='A').copy()

p.to_dataframe().fillna(1).squeeze()
#+end_src

And with $(x,p)$ defined we can calculate example demands:
#+begin_src ipython
c=r.demands(x,p)
c
#+end_src

Finally, define a function to change a single price in the vector $p$:
#+begin_src ipython
def my_prices(p0,p=p,i='Coconut'):
    p = p.copy()
    p.loc[i] = p0
    return p
#+end_src

* Mapping to Nutrients

We've seen how to map prices and budgets into vectors of consumption
quantities using =cfe.Result.demands=.  Next we want to think about
how to map these into bundles of /nutrients/.  The information needed
for the mapping comes from a "Food Conversion Table" (or database,
such as the [[https://ndb.nal.usda.gov/ndb/doc/apilist/API-FOOD-REPORTV2.md][USDA Nutrition DataBase]]).   Here we've adapted (with
thanks to Alessandro Tarozzi of the Universitat Pompeu Fabra) a food
conversion table developed by Gopalan et al (1980) to the foods
reported in the Indian ICRISAT data:
#+begin_src ipython
import pandas as pd
fct = pd.read_pickle('./IndianICRISAT/fct.df')

# Change some labels
d={'protein':'Protein',
   'fat':'Fat',
   'energy_kcal':'Calories',
   'calcium':'Calcium',
   'betacarotene':'Betacarotene',
   'thiamine':'Thiamine',
   'riboflavin':'Riboflavin',
   'niacin':'Niacin',
   'iron':'Iron',
   'ascorbic_total':'Ascorbic Acid'}

fct = fct.rename(columns=d)[list(d.values())]
fct.index = fct.index.droplevel('unit')
fct
#+end_src

We need the index of the Food Conversion Table (FCT) to match up with
the index of the vector of quantities demanded.   To manage this we
make use of the =align= method for =pd.DataFrames=:
#+begin_src ipython 
# Index of fct includes names of goods and also units.  Drop the latter:
try:
    fct.index = fct.index.droplevel('unit')
except AttributeError: pass # not a multiindex?

# Create a new FCT and vector of consumption that only share rows in common:
fct0,c0 = fct.align(c,axis=0,join='inner')
print(fct0.index)
#+end_src


Now, since rows of =fct0= and =c0= match, we can obtain nutritional
outcomes from the inner (or dot, or matrix) product of the transposed
=fct0= and =c0=:

#+begin_src ipython
# The @ operator means matrix multiply
N = fct0.T@c0
N
#+end_src

Of course, since we can compute the nutritional content of a vector of
consumption goods =c0=, we can also use our demand functions to
compute nutrition as a /function/ of prices and budget.  

#+begin_src ipython
def nutrient_demand(x,p):
    c = r.demands(x,p)
    fct0,c0 = fct.align(c,axis=0,join='inner')
    N = fct0.T@c0

    return N
#+end_src

With this =nutrient_demand= function in hand, we can see how nutrient
outcomes vary with budget, given prices:
#+begin_src ipython
import numpy as np
import matplotlib.pyplot as plt
X = np.linspace(1,200,50)

UseNutrients = ['Protein','Fat','Calories','Iron','Calcium']

plt.plot(X,pd.concat({x:np.log(nutrient_demand(x,p))[UseNutrients] for x in X},axis=1).T)
plt.legend(UseNutrients)
plt.xlabel('log budget')
plt.ylabel('log nutrient')
#+end_src

Now how does nutrition vary with prices?

#+begin_src ipython

P = np.linspace(.1,10,50)

x = 10

plt.plot(P,pd.concat({p0:np.log(nutrient_demand(x,my_prices(p0,i='Bengalgram dhal')))[UseNutrients] for p0 in P},axis=1).T)
plt.legend(UseNutrients)
plt.xlabel('log price')
plt.ylabel('log nutrient')
#+end_src


* Nutritional requirements

Individuals have nutritional requirements established by nutrition
scientists.  Here are some standards established by the Indian
National Institute of Nutrition:

** Nutritional needs of individuals

 #+name: rda
 | Sex-Age | Calories | Protein | Fat | Calcium | Iron | Betacarotene | Thiamine | Riboflavin | Niacin | Ascorbic Acid |
 |---------+----------+---------+-----+---------+------+--------------+----------+------------+--------+---------------|
 | C 0-0.5 |          |         |     |     500 |      |              |       .2 |         .3 |        |            25 |
 | C 0.5-1 |          |         |  19 |     500 |    5 |         2800 |       .3 |         .4 |        |            25 |
 | C 1-3   |     1060 |    16.7 |  27 |     600 |    9 |         3200 |       .5 |         .6 |      8 |            40 |
 | C 4-6   |     1350 |    20.1 |  25 |     600 |   13 |         3200 |       .7 |         .8 |     11 |            40 |
 | C 7-9   |     1690 |    29.5 |  30 |     600 |   16 |         4800 |       .8 |         1. |     13 |            40 |
 | B 10-12 |     2190 |    39.9 |  35 |     800 |   21 |         4800 |      1.1 |        1.3 |     15 |            40 |
 | G 10-12 |     2010 |    40.4 |  35 |     800 |   27 |         4800 |       1. |        1.2 |     13 |            40 |
 | B 13-15 |     2750 |    54.3 |  45 |     800 |   32 |         4800 |      1.4 |        1.6 |     16 |            40 |
 | G 13-15 |     2330 |    51.9 |  40 |     800 |   27 |         4800 |      1.2 |        1.4 |     14 |            40 |
 | B 16-17 |     3020 |    61.5 |  50 |     800 |   28 |         4800 |      1.5 |        1.8 |     17 |            40 |
 | G 16-17 |     2440 |    55.5 |  35 |     800 |   26 |         4800 |       1. |        1.2 |     14 |            40 |
 | M       |     2730 |      60 |  30 |     600 |   17 |         4800 |      1.4 |        1.4 |     18 |            40 |
 | W       |     2230 |      55 |  25 |    1200 |   21 |         4800 |      1.1 |        1.3 |     14 |            40 |

#+begin_src ipython :var RDA=rda :colnames no :exports silent
rda=pd.DataFrame([x[1:] for x in RDA[1:]],columns=RDA[0][1:],index=[x[0] for x in RDA[1:]])
rda.to_pickle('rda.df')
#+end_src

** Nutritional Needs of Households
   Our data on demand and nutrients is at the /household/ level; we
   can't directly compare household level nutrition with individual
   level requirements.  What we *can* do is add up minimum individual
   requirements, and see whether household total exceed these.  This
   isn't a guarantee that all individuals have adequate nutrition
   (since the way food is allocated in the household might be quite
   unequal, or unrelated to individual requirements), but it is
   /necessary/ if all individuals are to have adequate nutrition.

   For the average household in the ICRISAT villages, the number of
   different kinds of people can be computed by averaging over households:
#+begin_src ipython

# In 1975, averaged over households and villages
zbar = r.z.sel(t=75).mean(['j','m'])[:-1] # Leave out log HSize
#+end_src

Now, the inner/dot/matrix product between =zbar= and the =rda=
DataFrame of requirements will give us minimum requirements for the
average household:
#+begin_src ipython
rda = pd.read_pickle('rda.df')

# This matrix product gives minimum nutrient requirements for average
# household in 1975
hh_rda = rda.replace('',0).T@zbar
hh_rda
#+end_src

* Nutritional Adequacy of Food Demands
Since we can trace out demands for nutrients as a function of $(x,p)$,
and we've computed minimum nutritional requirements for the average
household, we can /normalize/ nutritional intake to check the adequacy
of diet.
#+begin_src ipython :results silent
def nutrient_adequacy_ratio(x,p):
    return nutrient_demand(x,p)/hh_rda
#+end_src

In terms of normalized nutrients, any household with more than one
unit of any given nutrient (or zero in logs) will be consuming a
minimally adequate level of the nutrient; below this level there's
clearly nutritional inadequacy.  For this reason the ratio of
actual nutrients to required nutrients is termed the "nutrient
adequacy ratio," or NAR.

#+begin_src ipython
plt.plot(X,pd.concat({x:np.log(nutrient_adequacy_ratio(x,p))[UseNutrients] for x in X},axis=1).T)
plt.legend(UseNutrients)
plt.xlabel('log budget')
plt.ylabel('log nutrient adequacy ratio')
plt.axhline(0)
#+end_src


As before, we can also vary relative prices.  Here we trace out
nutritional adequacy varying the price of Bengalgram dahl:
#+begin_src ipython
x = 20

plt.plot(pd.concat({p0:np.log(nutrient_adequacy_ratio(x,my_prices(p0,i='Bengalgram dhal')))[UseNutrients] for p0 in P},axis=1).T,P)
plt.legend(UseNutrients)
plt.ylabel('Price')
plt.xlabel('log nutrient adequacy ratio')
plt.axvline(0)
plt.axhline(p.sel(i='Bengalgram dhal').values)
#+end_src

And varying the price of rice:
#+begin_src ipython
x = 20

plt.plot(pd.concat({p0:np.log(nutrient_adequacy_ratio(x,my_prices(p0,i='Rice')))[UseNutrients] for p0 in P},axis=1).T,P)
plt.legend(UseNutrients)
plt.ylabel('Price')
plt.xlabel('log NAR')
plt.axvline(0)
plt.axhline(p.sel(i='Rice').values)
#+end_src


